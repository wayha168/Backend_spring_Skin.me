spring.application.name=skin_me
server.port=8800

spring.datasource.username=root
spring.datasource.password=${DB_PASSWORD}
spring.datasource.url=jdbc:mysql://157.230.245.108:3306/skinme_db
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.ddl-auto=update

server.use-forward-headers=true
spring.servlet.multipart.max-file-size= 5MB
spring.servlet.multipart.max-request-size = 5MB

api.prefix=/api/v1

openapi.api.url=https://api.openai.com/v1/chat/completions
openapi.api.model=gpt-4o-mini
openai.api.key=${OPENAI_API_KEY}

# === STRIPE KEYS ===
stripe.secret.key= ${STRIPE_SECRET_KEY}
stripe.public.key= ${STRIPE_PUBLIC_KEY}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET}

# Google OAuth2 (development only - do NOT commit secrets to source control)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=https://skinme.store/oauth-callback
spring.security.oauth2.client.registration.google.client-name=Google

# Optional: where to redirect frontend after success. If empty, backend returns JSON with {"token":"..."}
app.oauth.frontend-url=https://skinme.store/oauth-callback
app.oauth.base-url=https://backend.skinme.store

auth.token.expirationInMils= 360000
auth.token.jwtSecret=${JWT_SECRET}

logging.level.org.springdoc=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer=ERROR
